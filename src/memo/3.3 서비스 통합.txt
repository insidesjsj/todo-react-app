3.3 서비스 통합
학습 내용
: 크로스-오리진 리소스 셰어링('C'ross-'O'rigin 'R'esource 'S'haring)

실습 내용
- 스프링 @Configurtion을 이용한 CORS 문제 해결
- fetch를 이용한 프론트엔드와 백엔드 통합


3.3.1 componentDidMount
: 렌더링이 맨 처음 일어나는 순간, 즉 ReactDOM 트리가 존재하지 않는 상태에서 리액트가 처음으로 각 컴포넌트의 render() 함수를 콜해 자신의 DOM 트리를 구성하는 과정을 마운팅이라고 한다.
마운팅 과정에서 생성자자와 render() 함수를 부르는데 마운팅을 마친 후 바로 부르는 함수가 componentDidMount라는 함수다.
컴포넌트가 렌더링 되자마자 API 콜을 하고  그 결과를 리스트로 보여주려고 componentDidMount 함수에 백엔드 API 콜을 구현해야한다.

- 왜 생성자에서 API 콜을 하지 않을까?
: 마운팅이 다 되지 앟을 상태라는 것은 컴포넌트의 프로퍼티(setState 등)가 아직 준비되지 않은 상태라는 뜻.
필욧한 모든 프로퍼티의 존재 여부를 모르는 상태에서 API 콜을 해 상태를 변경하면 프로그램이 예기치 못한 방향으로 흘러갈 수 있다.
리액트에서도 이런 경우 경고메시지를 남긴다.

1) App 컴포넌트에 componentDidMount 추가
localhost/:1 Access to fetch at 'http://localhost:8053/todo' from origin 'http://localhost:3000' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource.
If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.

: 보안을 위한 CORS 헤더 Policy를 위반했기 때문에 에러가 나온다.

-----------------------------------------------------------------------
3.3.2 CORS
: 처음 리소스를 제공한 도메인(Origin)이 현재 요청하려는 도메인과 다르더라도 요청을 허락해 주는 웹 보안 방침

브라우저는 HTTP 요청의 헤더에 이 요청의 Origin을 함께 보낸다.
HTTP OPTION 요청을 보내는 경우 http://localhost:8053은 이 요청을 보낸 리소스의 원래 서버, 즉 요청의 Origin을 확인한다.
만약 요청의 Origin이 자신과 같은 Origin이라면 요청을 수행, 다른면 거절한다.

CORS가 가능하려면 백엔드에서 CORS 방침 설정을 해줘야한다.
1) 스프링 부트 애플리케이션 프로젝트로 돌아가 com.example.demo.config라는 패키지를 만들고

2) WebMvcConfig라는 클래스를 만들어준다.
: WebMvcConfig의 addCorsMappings 메서드에서 작성한 설정은 다음과 같은 의미를 지닌다.
- 모든 경로(/**)에 대해 Origin이 http://localhost:3000인 경우 GET, POST, PUT, PATCH, DELETE 메서드를 이용한 요청을 허용
- 모든 헤더와 인증에 관한 정보도 허용

-----------------------------------------------------------------------
3.3.3 fetch
fetch 메서드는 Promise를 리턴한다.

자바스크립트 Propmise
: 비동기 오퍼레이션을 사용한다.
- 자바스크립트는 싱글 스레드 환경에서 동작 => 내가 HTTP 요청을 백엔드에 보냈는데 백엔드에서 이를 처리하는데 1분이 걸림 => 브라우저는 1분간 아무것도 못함.
- 이를 해극복하기 위해 대부분의 자바스크립트 엔진은 자바스크립트 스레드 밖에서 이런 오퍼레이션(Web API)을 실행

fetch가 아닌 XMLHttpRequest 오브젝트를 이용해 GET 요청을 보내면 생기는 문제
1) 오퍼레이션이 현재 실행 중인 자바스크립트 스레드가 아니라 다른 곳에서 실행된다면 HTTP 응답을  받았다는 사실을 어떻게 알 수 있는가? => 이는 콜백함수로 해결

2) 하지만 콜백 함수를 통해 응답을 받아 이를 처리하는 과정에서 콜백함수 내에서 또 다른 HTTP 요청을 하고, 그 두 번째 요청을 위한 콜백을 또 정의하는 과정에서 코드가 굉장히 복작해진다.
=> 이런 것을 콜백 지옥이라고 부른다.

3) 콜백 지옥을 피할 수 있는 방법 중 하나가 바로 Promise

==================================
function exampleFunction() {
    return new Promise((resolve, reject) => {
        var oReq = new XMLHttpRequest();
        oReq.open("GET", "http://localhost:8080");
        oReq.onload = function () {
            resolve(oReq.response); // Resolve 상태
        };
        oReq.onerror = function () {
            reject(oReq.response);  // Reject 상태
        };
        oReq.send();    // pending 상태
    });
}

exampleFunction()
    .then((r) => console.log("Resolved " + r))
    .catch((e) => console.log("Rejected " + e));
==================================
Promise의 세 가지 상태

Pending)
: 오퍼레이션이 끝나길 기다리는 상태
- 오퍼레이션이 성공적으로 끝나면 resolve() 함수를 통해 이 오퍼레이션이 성공적으로 끝났음을 알리고 원하는 값을 전달.

Resolve)
: then의 매개변수로 넘어오는 함수를 실행

Reject)
: 오퍼레이션 중 에러가 나는 경우 reject() 함수를 콜 한다.

then이나 catch로 넘기는 함수들은 당장 실행되는 것은 아님. 매개변수로 해야 할 일ㅇ르 넘겨주는 것이고, 실제 이 함수들이 실행되는 것은 resolve와 reject가 실행되는 시점

---------------------------------------------
Fetch API
: 자바스크립트가 제공하는 메서드. API 서버로 http 요청을 송수신 할 수 있도록 도와줌

- url과 options를 매개변수로 받을 수 있음.
- fetch() 함수는 Promise 오브젝트를 리턴
- then과 catch에 콜백함수를 전달해 응답을 처리할 수 있음.

ex1) url만 이용해 GET 메서드로 요청을 보내는 방법
======================================
fetch("http://localhost:8080/todo")
    .then(respone => {
        // reponse 수신 시 하고 싶은 작업
    })
    .catch(e=> {
        // 에러가 났을 때 하고 싶은 작업
    })
=====================================

fetch는 첫 번째 매개변수로 uri를 받는다.
- 이렇게 하면 디폴트로 GET 메서드를 사용하ㄹ는 것과 같다.
- then에는 응답을 받은 후 실행할 함수 reponse => {}를 매개변수로 남기고
- catch에는 예외 발생 시 실행 할 함수 e => {}를 남긴다.


 ex2) 메서드를 명시하고 싶거나 헤더와 바디를 함께 보내야 할 경우
 ==========================================
 options = {
     method: "POST",
     headers: [
         ["Content-Type", "application/json"]
     ],
     body: JSON.stringify(data)
 };

 fetch("http://localhost:8080/todo", options)
     .then(respone => {
         // reponse 수신 시 하고 싶은 작업
     })
     .catch(e=> {
         // 에러가 났을 때 하고 싶은 작업
     })
=============================================

- 두 번째 매개변수에 요청에 대한 정보가 담긴 오브젝트를 넘겨준다.

1) src 디렉토리 아래에 app-config.js 생성
- app-config.js 에서 백엔드 서비스의 주소인 http://localhost:8053을 변수에 담고
- 현재 브라우저의 도메인이 localhost인 경우 로컬 호스트에서 동작하는 백엔드 애플리케이션 사용

2) src 디렉토리 아래에 service 디렉토리를 생성하고, 그 아래 ApiService.js를 생성
: 백엔드로 요청을 보낼 때 사용할 유틸리티 함수를 작성(없으면 끝없는 반복 작업 해야 됨 ㅠㅠ)

3) App 컴포넌트에서 ApiService 사용 (componentDidMount, add, delete 메서드 수정)
: ApiService에서 작성한 call 메서드를 사용해 간단하게 Api 콜을 할 수 있다.

-----------------------------------------------------